konsep web (client dan server)

alat-alat digunakan mengembangkan aplikasi
- web server : apache, iis, nginx
- browser : mozilla, ie, chrome
- script server : php, asp
- editor : notepad, dreamweaver

web : dokumen HTML : HTML, CSS, JS

PHP : script
penggunaan PHP = bahasa program => algoritma
proses algoritma
- sekuensi / urutan / sequential
- percabangan / conditional ==> if, if else, switch
- iterasi / perulangan / looping ===> for, while, do-while


komponen bahasa program
- key word / perintah : echo, print, 
- variabel : $namaVariabel, $namavariabel = 77.77
- konstanta : define("namaKontanta", "nilaiKonstanta"), namaKontanta
- tipe data : string, integer, float, boolean, array, resource
- operator : aritmatika (+ * / -), boolean (true false), assigment (= =+ .=), logika (or and xor), perbandingan (< > == <= >=)
$x = $y + 90 ;

struktur kontrol
if(kondisi)
	nilai benar

if($n > 5)
	echo "lebih dari lima" ;

if(kondisi)
	nilai benar
else
	nilai salah

<?php
	$nilai = 78 ;
	if($nilai >= 60)
		echo "lulus" ;
	else
		echo "tidak lulus" ;
?>

switch-case
scitch($namaVariabel)
{
	case nilaiVariabel1:
		pernyataan benar ;
		break;
	
	case nilaLain:
		pernyataan lain ;
		break ;
	
	default :
		pernyataan default ;
}

<?php
	$nilai = "A" ;
	scwitch ($nilai)
	{
		case "A" :
			echo "Sangat Baik" ;
			break ;
		case "B" :
			echo "Baik";
			break;
		default :
			echo "Cukup" ;
	}
?>

for(nilaiAwal;kondisi;kenaikan){
	pernyataan perulangan
}

12345
<?php
	for($x=1;$x<=5;$x++){
		echo $x  ;
	}
?>

nilaiAwal
while(kondisi){
	penyataan perulangan
	kenaikan
}

<?php
$x = 1 ;
while($x<=5){
	echo $x ;
	$x++ ;
}
?>

do-while
do{
	pernyataan program
}while(kondisi)

<?php
$x = 1 ;
do{
	echo $x;
	$x++ ;
}while($x<=5)
?>

fungsi / prosedur / function
memanggil fungsi : namaFungsi(parameter1, ..., perameterLL)

- fungsi built-in / bawaan / asli / internal : fungsi yang disediakan oleh bahasa program
<?php
	echo date("d-m-Y") ;
	echo number_format(1000.98,2,",",".") ;
	echo sin(90) ;
	echo substr("text",1,3) ;
	echo str_replace("2","text2","1") ;
?>

- fungsi buatan / external : fungsi yang dibuat oleh programmer

function namaFungsi (parameter1, ... , parameter2){
	pernyatan fungsi ;
	return nilaiKeluaran ;
}
fungsi.php
<?php
	function tambah($x, $y){
		return $x + $y ;
	}
?>

tambah.php
<?php
include("fungsi.php") ;

$a = 23 ; $b = 20 ;
$c = tambah($a, $b) ;
echo $c ;
?>

mengambil nilai dari form
-------------------------
form.php
<form action="proses.php" method="post">
	data <input type="text" name="data" />
	<input type="submit" value="KIRIM" />
</form>

proses.php
<?php
$data = isset($_POST["data"]) ? $_POST["data"] : "" ; 
// variabel ternary

//validasi
if($data == "")
	echo "data kosong" ;

?>


fitur upload data
------------------
form.php
<form action="proses.php" method="post" entype="multipart/form-data>
	text <input type="text" nama="dataTxt" />
	data <input type="file" name="data" /> 
	<input type="submit" value="KIRIM" />
</form>

proses.php
<?php
$text = $_POST["dataTxt"]
$data = $_FILES["data"] ;

echo " nama file " . $data["name"] ;
echo " tipe file " . $data["type"] ; // (mime: file/jpg)
echo " ukuran byte " . $data["size"] ;
echo " simpanan semetara di server " . $data[tmp_name] ;

//memindahkan file dari tempat sementara ke folder yang diatur
move_uploaded_file($data[tmp_name], "folder/".$data["name"]) ;

if($data["size"] * 1000000 > 2)
	echo "lebih dari 2 MB" ;
?>

penggunaan database
--------------------
extensi database : API 
- mysql (deprecated)
- mysqli * prosedural / fungsi
		 * oop / class - objek
- PDO * oop / class - objek


mysqli
------
mysqli_connect(), mysqli_query(), mysqli_close() ;


fitur database = CRUD ~ perintah SQL 

langkah-langkah secara umum dalam script PHP yang akses database:
1. membuat koneksi : mysqli_connect()
2. menyiapkan perintah SQL
3. menjalan query / perintah SQL : mysqli_query()
4. jika sql adalah select, maka resource data ubah menjadi array atau lakukan fetch menjadi array 
	: mysqli_fetch_assoc() 
5. tutup koneksi : mysqli_close() 

fitur read : select
-------------------
<?php
//membuat koneksi
$kon = mysqli_connect("localhost","root","","nama_db") ;
//menyiapkan SQL
$sql = "SELECT * FROM nama_tabel WHERE id='111'" ;
//menjalankan query
$query = mysqli_query($kon, $sql) ;
//fetch menjadi array
$data = mysqli_fetch_assoc($query);
//menampilkan data
echo $data['id'] ; 
.....
//menutup koneksi
mysqli_close($kon) ;
?>

fitur Read : menampilkan data ;
fitur Create : input dari form, proses simpa data ;
fitur Update : menampilkan data, memilih data, menampilkan form dengan isian data sementara, input dari form, proses update data;
fitur delete : menampilkan data, memilih data, proses delete data ;

transaksi / master detail
-------------------------
master : bagian utama 
detail : rincian data yang diambil

konsep dari database multi tabel (tabel berlasi)

contoh : nota belanja

pembuatan proses di PHP sama seperti pembuatan fitur CRUD

penyimpanan sementara (session dan cookies)
------------------------------------------
session : disimpan diserver
cookies : disimpan diclient (browser)

contoh implementasi membuat login sistem

perintah-perintah session
-------------------------
// membuka sesi 
session_start() ;

// mengisi nilai variabel
$_SESSION['indexSesi'] = "nilai sesi" ;

// membaca / menggunakan nilai sesi
echo $_SESSION['indexSesi'] ;

// memusnahkan variabel sesi
session_destroy() ;


perintah-perintah cookies
-------------------------
// mengisi nilai cookie
setcookie("indexCookie","nilaiCookie",time()+(1000 * 60 * 60));

// membaca / menggunakan cookie
echo $_COOKIE["indexCookie"] ;

// membuat cookie expiret
setcookie("indexCookie","nilaiCookie",time()-1);

OOP (object oriented programming)
---------------------------------
- teknik pembuatan programming objek 
- objek akan 
	* terdiri properti / ciri / variabel
	* memiliki rule / aturan / cara / method / fungsi
	
mekanisme OOP
- enkapsulasi : membuat class sebagai kontainer objek
- enheritance : pewarisan sifat
- polimorphisme : fungsi bisa berbagai bentuk

<?php
//membuat kelas
class namaKelas
{
	var data1 ;
	var data2 ;
	
	function method1()
	{
		return $this->data1 ;
	}	
	
	function method1()
	{
		return $this->data1 ;
	}
}
?>

<?php
$objek = new namaKelas() ;
$objek->data1 = "nilaData" ;
echo $objek->method1() ;


$macamObjek = new namaKelas() ;
$macamObjek->data1 = "nilaiData2" ;
$ma
?>













































